"""
Enterprise-grade 3D BIM Viewer Streamlit Component
Built with ThatOpen engine, web-ifc, and Three.js
"""

import streamlit as st
import streamlit.components.v1 as components
import os
import json
import tempfile
import subprocess
from pathlib import Path
from typing import Optional, Dict, Any, List
import base64
import io
import zipfile
import pandas as pd
from datetime import datetime

class BIMViewerComponent:
    """Enterprise-grade BIM Viewer Streamlit Component"""
    
    def __init__(self, 
                 height: int = 600,
                 width: str = "100%",
                 key: Optional[str] = None):
        self.height = height
        self.width = width
        self.key = key
        self._component_ready = False
        
    def render_viewer(self, 
                     ifc_data: Optional[bytes] = None,
                     ifc_url: Optional[str] = None,
                     navigation_mode: str = "orbit",
                     show_grid: bool = True,
                     show_axes: bool = True,
                     enable_measurements: bool = True,
                     background_color: str = "#f0f0f0",
                     viewer_config: Optional[Dict[str, Any]] = None) -> Any:
        """
        Render the 3D BIM viewer with IFC model
        
        Args:
            ifc_data: Raw IFC file data as bytes
            ifc_url: URL to IFC file (alternative to ifc_data)
            navigation_mode: "orbit", "walk", "fly"
            show_grid: Show grid in viewer
            show_axes: Show coordinate axes
            enable_measurements: Enable measurement tools
            background_color: Background color
            viewer_config: Additional viewer configuration
        """
        
        # Default configuration
        default_config = {
            "enableClipping": True,
            "enableSelection": True,
            "enableProperties": True,
            "enableSections": True,
            "enableAnnotations": True,
            "quality": "high",
            "renderMode": "solid",
            "enableShadows": True,
            "enableWireframe": False
        }
        
        if viewer_config:
            default_config.update(viewer_config)
            
        # Prepare IFC data
        ifc_data_url = None
        if ifc_data:
            ifc_data_b64 = base64.b64encode(ifc_data).decode()
            ifc_data_url = f"data:application/octet-stream;base64,{ifc_data_b64}"
        
        # Component HTML with ThatOpen engine
        component_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>BIM Viewer</title>
            <style>
                body {{
                    margin: 0;
                    padding: 0;
                    overflow: hidden;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: {background_color};
                }}
                
                #viewer-container {{
                    width: 100%;
                    height: 100vh;
                    position: relative;
                    background: {background_color};
                }}
                
                #loading-overlay {{
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(240, 240, 240, 0.9);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                    font-size: 18px;
                    color: #333;
                }}
                
                .loading-spinner {{
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #3498db;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    animation: spin 1s linear infinite;
                    margin-right: 15px;
                }}
                
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
                
                #toolbar {{
                    position: absolute;
                    top: 10px;
                    left: 10px;
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 8px;
                    padding: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    z-index: 100;
                    display: flex;
                    gap: 10px;
                    flex-wrap: wrap;
                }}
                
                .tool-button {{
                    padding: 8px 12px;
                    border: none;
                    background: #3498db;
                    color: white;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 12px;
                    transition: background 0.3s;
                }}
                
                .tool-button:hover {{
                    background: #2980b9;
                }}
                
                .tool-button.active {{
                    background: #e74c3c;
                }}
                
                #info-panel {{
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 8px;
                    padding: 15px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    z-index: 100;
                    max-width: 300px;
                    font-size: 12px;
                }}
                
                #properties-panel {{
                    position: absolute;
                    bottom: 10px;
                    left: 10px;
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 8px;
                    padding: 15px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    z-index: 100;
                    max-width: 400px;
                    max-height: 300px;
                    overflow-y: auto;
                    font-size: 12px;
                    display: none;
                }}
                
                #measurement-display {{
                    position: absolute;
                    bottom: 10px;
                    right: 10px;
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 8px;
                    padding: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    z-index: 100;
                    font-size: 14px;
                    font-weight: bold;
                    display: none;
                }}
                
                .error-message {{
                    color: #e74c3c;
                    background: #fff;
                    padding: 20px;
                    border-radius: 8px;
                    margin: 20px;
                    border-left: 4px solid #e74c3c;
                }}
            </style>
        </head>
        <body>
            <div id="viewer-container">
                <div id="loading-overlay">
                    <div class="loading-spinner"></div>
                    <span>Loading BIM Model...</span>
                </div>
                
                <div id="toolbar">
                    <button class="tool-button" onclick="setNavigationMode('orbit')" id="orbit-btn">Orbit</button>
                    <button class="tool-button" onclick="setNavigationMode('walk')" id="walk-btn">Walk</button>
                    <button class="tool-button" onclick="setNavigationMode('fly')" id="fly-btn">Fly</button>
                    <button class="tool-button" onclick="toggleGrid()" id="grid-btn">Grid</button>
                    <button class="tool-button" onclick="toggleAxes()" id="axes-btn">Axes</button>
                    <button class="tool-button" onclick="toggleMeasurement()" id="measure-btn">Measure</button>
                    <button class="tool-button" onclick="fitToView()">Fit View</button>
                    <button class="tool-button" onclick="toggleWireframe()">Wireframe</button>
                    <button class="tool-button" onclick="toggleClipping()">Section</button>
                    <button class="tool-button" onclick="exportData()">Export</button>
                </div>
                
                <div id="info-panel">
                    <h4 style="margin-top: 0;">Model Info</h4>
                    <div id="model-stats">No model loaded</div>
                </div>
                
                <div id="properties-panel">
                    <h4 style="margin-top: 0;">Element Properties</h4>
                    <div id="element-properties">Select an element to view properties</div>
                </div>
                
                <div id="measurement-display">
                    Distance: <span id="distance-value">0.00 m</span>
                </div>
            </div>
            
            <script type="module">
                import {{ 
                    Components, 
                    SimpleRenderer, 
                    PostproductionRenderer,
                    SimpleCamera,
                    SimpleRaycaster,
                    SimpleClipper,
                    SimpleDimensions,
                    IfcLoader,
                    FragmentsManager
                }} from 'https://unpkg.com/@thatopen/components@latest/dist/index.js';
                
                import * as THREE from 'https://unpkg.com/three@latest/build/three.module.js';
                import {{ OrbitControls }} from 'https://unpkg.com/three@latest/examples/jsm/controls/OrbitControls.js';
                
                class BIMViewer {{
                    constructor() {{
                        this.container = document.getElementById('viewer-container');
                        this.loadingOverlay = document.getElementById('loading-overlay');
                        this.currentModel = null;
                        this.measurementMode = false;
                        this.measurementPoints = [];
                        this.navigationMode = '{navigation_mode}';
                        this.init();
                    }}
                    
                    async init() {{
                        try {{
                            // Initialize ThatOpen components
                            this.components = new Components();
                            
                            // Setup renderer
                            this.renderer = this.components.get(PostproductionRenderer);
                            this.renderer.container = this.container;
                            this.renderer.setup();
                            
                            // Setup camera
                            this.camera = this.components.get(SimpleCamera);
                            this.camera.setup();
                            
                            // Setup raycaster for selection
                            this.raycaster = this.components.get(SimpleRaycaster);
                            this.raycaster.setup();
                            
                            // Setup fragments manager
                            this.fragments = this.components.get(FragmentsManager);
                            
                            // Setup IFC loader
                            this.ifcLoader = this.components.get(IfcLoader);
                            await this.ifcLoader.setup();
                            
                            // Setup dimensions
                            this.dimensions = this.components.get(SimpleDimensions);
                            this.dimensions.setup();
                            
                            // Setup clipper
                            this.clipper = this.components.get(SimpleClipper);
                            this.clipper.setup();
                            
                            // Configure scene
                            this.setupScene();
                            
                            // Setup event listeners
                            this.setupEventListeners();
                            
                            // Load IFC if data provided
                            await this.loadInitialModel();
                            
                            this.hideLoading();
                            
                        }} catch (error) {{
                            console.error('Failed to initialize BIM viewer:', error);
                            this.showError('Failed to initialize BIM viewer: ' + error.message);
                        }}
                    }}
                    
                    setupScene() {{
                        const scene = this.renderer.scene;
                        
                        // Lighting
                        const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
                        scene.add(ambientLight);
                        
                        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                        directionalLight.position.set(50, 50, 50);
                        directionalLight.castShadow = true;
                        scene.add(directionalLight);
                        
                        // Grid
                        if ({str(show_grid).lower()}) {{
                            const gridHelper = new THREE.GridHelper(100, 100);
                            scene.add(gridHelper);
                        }}
                        
                        // Axes
                        if ({str(show_axes).lower()}) {{
                            const axesHelper = new THREE.AxesHelper(10);
                            scene.add(axesHelper);
                        }}
                        
                        // Background
                        scene.background = new THREE.Color('{background_color}');
                    }}
                    
                    setupEventListeners() {{
                        // Selection events
                        this.raycaster.onRaycast.add((intersections) => {{
                            if (intersections.length > 0) {{
                                this.handleElementSelection(intersections[0]);
                            }}
                        }});
                        
                        // Window resize
                        window.addEventListener('resize', () => {{
                            this.camera.updateAspect();
                            this.renderer.resize();
                        }});
                        
                        // Measurement click handling
                        this.container.addEventListener('click', (event) => {{
                            if (this.measurementMode) {{
                                this.handleMeasurementClick(event);
                            }}
                        }});
                    }}
                    
                    async loadInitialModel() {{
                        const ifcDataUrl = '{ifc_data_url or ""}';
                        const ifcUrl = '{ifc_url or ""}';
                        
                        if (ifcDataUrl) {{
                            await this.loadFromDataUrl(ifcDataUrl);
                        }} else if (ifcUrl) {{
                            await this.loadFromUrl(ifcUrl);
                        }}
                    }}
                    
                    async loadFromDataUrl(dataUrl) {{
                        try {{
                            const response = await fetch(dataUrl);
                            const arrayBuffer = await response.arrayBuffer();
                            const uint8Array = new Uint8Array(arrayBuffer);
                            
                            const model = await this.ifcLoader.load(uint8Array);
                            this.currentModel = model;
                            this.updateModelInfo(model);
                            this.fitToView();
                            
                        }} catch (error) {{
                            console.error('Failed to load IFC from data URL:', error);
                            this.showError('Failed to load IFC model: ' + error.message);
                        }}
                    }}
                    
                    async loadFromUrl(url) {{
                        try {{
                            const response = await fetch(url);
                            const arrayBuffer = await response.arrayBuffer();
                            const uint8Array = new Uint8Array(arrayBuffer);
                            
                            const model = await this.ifcLoader.load(uint8Array);
                            this.currentModel = model;
                            this.updateModelInfo(model);
                            this.fitToView();
                            
                        }} catch (error) {{
                            console.error('Failed to load IFC from URL:', error);
                            this.showError('Failed to load IFC model: ' + error.message);
                        }}
                    }}
                    
                    updateModelInfo(model) {{
                        const statsDiv = document.getElementById('model-stats');
                        const fragments = this.fragments.groups.get(model);
                        
                        if (fragments) {{
                            let vertexCount = 0;
                            let triangleCount = 0;
                            
                            for (const fragment of fragments.items) {{
                                vertexCount += fragment.geometry.attributes.position.count;
                                triangleCount += fragment.geometry.index.count / 3;
                            }}
                            
                            statsDiv.innerHTML = `
                                <strong>Model Loaded</strong><br>
                                Fragments: ${{fragments.items.length}}<br>
                                Vertices: ${{vertexCount.toLocaleString()}}<br>
                                Triangles: ${{Math.floor(triangleCount).toLocaleString()}}
                            `;
                        }}
                    }}
                    
                    handleElementSelection(intersection) {{
                        const fragment = intersection.object;
                        const instanceID = intersection.instanceId;
                        
                        if (fragment && this.currentModel) {{
                            // Get properties
                            const properties = this.fragments.groups.get(this.currentModel);
                            if (properties) {{
                                this.showElementProperties(fragment, instanceID);
                            }}
                        }}
                    }}
                    
                    showElementProperties(fragment, instanceID) {{
                        const propertiesPanel = document.getElementById('properties-panel');
                        const propertiesDiv = document.getElementById('element-properties');
                        
                        // Sample properties display
                        propertiesDiv.innerHTML = `
                            <strong>Selected Element</strong><br>
                            Fragment ID: ${{fragment.id}}<br>
                            Instance ID: ${{instanceID || 'N/A'}}<br>
                            Material: ${{fragment.material.name || 'Default'}}<br>
                            Vertices: ${{fragment.geometry.attributes.position.count}}
                        `;
                        
                        propertiesPanel.style.display = 'block';
                    }}
                    
                    handleMeasurementClick(event) {{
                        const rect = this.container.getBoundingClientRect();
                        const mouse = new THREE.Vector2();
                        mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
                        mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
                        
                        const raycaster = new THREE.Raycaster();
                        raycaster.setFromCamera(mouse, this.camera.three);
                        
                        const intersects = raycaster.intersectObjects(this.renderer.scene.children, true);
                        
                        if (intersects.length > 0) {{
                            const point = intersects[0].point;
                            this.measurementPoints.push(point);
                            
                            if (this.measurementPoints.length === 2) {{
                                const distance = this.measurementPoints[0].distanceTo(this.measurementPoints[1]);
                                this.showMeasurement(distance);
                                this.measurementPoints = [];
                            }}
                        }}
                    }}
                    
                    showMeasurement(distance) {{
                        const measurementDisplay = document.getElementById('measurement-display');
                        const distanceValue = document.getElementById('distance-value');
                        
                        distanceValue.textContent = `${{distance.toFixed(2)} m`;
                        measurementDisplay.style.display = 'block';
                        
                        // Hide after 5 seconds
                        setTimeout(() => {{
                            measurementDisplay.style.display = 'none';
                        }}, 5000);
                    }}
                    
                    fitToView() {{
                        if (this.currentModel && this.fragments.groups.has(this.currentModel)) {{
                            const group = this.fragments.groups.get(this.currentModel);
                            const box = new THREE.Box3();
                            
                            for (const fragment of group.items) {{
                                box.expandByObject(fragment);
                            }}
                            
                            const center = box.getCenter(new THREE.Vector3());
                            const size = box.getSize(new THREE.Vector3());
                            const maxDim = Math.max(size.x, size.y, size.z);
                            
                            this.camera.three.position.copy(center);
                            this.camera.three.position.z += maxDim * 1.5;
                            this.camera.controls.target.copy(center);
                            this.camera.controls.update();
                        }}
                    }}
                    
                    hideLoading() {{
                        this.loadingOverlay.style.display = 'none';
                    }}
                    
                    showError(message) {{
                        this.container.innerHTML = `
                            <div class="error-message">
                                <h3>Error</h3>
                                <p>${{message}}</p>
                            </div>
                        `;
                    }}
                }}
                
                // Global functions for toolbar
                let viewer;
                
                window.setNavigationMode = function(mode) {{
                    // Remove active class from all navigation buttons
                    document.querySelectorAll('#toolbar .tool-button').forEach(btn => {{
                        btn.classList.remove('active');
                    }});
                    
                    // Add active class to current mode
                    document.getElementById(mode + '-btn').classList.add('active');
                    
                    if (viewer && viewer.camera && viewer.camera.controls) {{
                        const controls = viewer.camera.controls;
                        
                        switch(mode) {{
                            case 'orbit':
                                controls.enableRotate = true;
                                controls.enablePan = true;
                                controls.enableZoom = true;
                                break;
                            case 'walk':
                                // Simplified walk mode
                                controls.enableRotate = true;
                                controls.enablePan = false;
                                controls.enableZoom = true;
                                break;
                            case 'fly':
                                controls.enableRotate = true;
                                controls.enablePan = true;
                                controls.enableZoom = true;
                                break;
                        }}
                        
                        viewer.navigationMode = mode;
                    }}
                }};
                
                window.toggleGrid = function() {{
                    const gridHelper = viewer.renderer.scene.getObjectByName('GridHelper');
                    if (gridHelper) {{
                        gridHelper.visible = !gridHelper.visible;
                    }}
                }};
                
                window.toggleAxes = function() {{
                    const axesHelper = viewer.renderer.scene.getObjectByName('AxesHelper');
                    if (axesHelper) {{
                        axesHelper.visible = !axesHelper.visible;
                    }}
                }};
                
                window.toggleMeasurement = function() {{
                    viewer.measurementMode = !viewer.measurementMode;
                    const btn = document.getElementById('measure-btn');
                    
                    if (viewer.measurementMode) {{
                        btn.classList.add('active');
                        btn.textContent = 'Stop Measure';
                    }} else {{
                        btn.classList.remove('active');
                        btn.textContent = 'Measure';
                        viewer.measurementPoints = [];
                    }}
                }};
                
                window.fitToView = function() {{
                    if (viewer) {{
                        viewer.fitToView();
                    }}
                }};
                
                window.toggleWireframe = function() {{
                    if (viewer && viewer.currentModel) {{
                        const group = viewer.fragments.groups.get(viewer.currentModel);
                        if (group) {{
                            for (const fragment of group.items) {{
                                fragment.material.wireframe = !fragment.material.wireframe;
                            }}
                        }}
                    }}
                }};
                
                window.toggleClipping = function() {{
                    if (viewer && viewer.clipper) {{
                        viewer.clipper.enabled = !viewer.clipper.enabled;
                    }}
                }};
                
                window.exportData = function() {{
                    if (viewer && viewer.currentModel) {{
                        // Export model data
                        const modelData = {{
                            timestamp: new Date().toISOString(),
                            model: viewer.currentModel,
                            fragmentsCount: viewer.fragments.groups.get(viewer.currentModel)?.items.length || 0
                        }};
                        
                        // Send data back to Streamlit
                        if (window.parent && window.parent.postMessage) {{
                            window.parent.postMessage({{
                                type: 'streamlit:exportData',
                                data: modelData
                            }}, '*');
                        }}
                    }}
                }};
                
                // Initialize viewer when DOM is loaded
                document.addEventListener('DOMContentLoaded', async function() {{
                    viewer = new BIMViewer();
                    
                    // Set initial navigation mode
                    setNavigationMode('{navigation_mode}');
                }});
                
            </script>
        </body>
        </html>
        """
        
        # Render the component
        component_value = components.html(
            component_html,
            height=self.height,
            width=self.width,
            scrolling=False
        )
        
        return component_value

class IFCConverter:
    """Handles conversion from Revit and Navisworks to IFC"""
    
    @staticmethod
    def convert_revit_to_ifc(revit_file_path: str, output_path: str, 
                           export_config: Optional[Dict] = None) -> str:
        """
        Convert Revit file to IFC using Revit API
        
        Note: This requires Revit to be installed and accessible
        """
        default_config = {
            "IFCVersion": "IFC4",
            "SpaceBoundaries": 1,
            "ExportBaseQuantities": True,
            "SplitWallsAndColumns": False,
            "Export2DElements": False,
            "ExportLinkedFiles": False,
            "ExportRoomsInView": False
        }
        
        if export_config:
            default_config.update(export_config)
            
        # PowerShell script for Revit IFC export
        ps_script = f"""
        Add-Type -AssemblyName "Autodesk.Revit.DB"
        Add-Type -AssemblyName "Autodesk.Revit.UI"
        
        # This is a simplified version - actual implementation would need
        # to interface with Revit API through .NET/COM
        Write-Host "Converting Revit file to IFC..."
        Write-Host "Input: {revit_file_path}"
        Write-Host "Output: {output_path}"
        Write-Host "Config: {json.dumps(default_config)}"
        """
        
        # Note: Actual implementation would require Revit API access
        raise NotImplementedError(
            "Revit to IFC conversion requires Revit API access. "
            "Please use Revit's built-in IFC export or the Autodesk.Revit.IFC library."
        )
    
    @staticmethod
    def convert_navisworks_to_ifc(nwd_file_path: str, output_path: str,
                                export_config: Optional[Dict] = None) -> str:
        """
        Convert Navisworks file to IFC
        
        Note: This requires Navisworks API or third-party tools
        """
        default_config = {
            "IFCVersion": "IFC4",
            "ExportGeometry": True,
            "ExportProperties": True,
            "ObjectMapping": True,
            "CoordinateSystem": "Global"
        }
        
        if export_config:
            default_config.update(export_config)
            
        # Note: Actual implementation would require Navisworks API
        raise NotImplementedError(
            "Navisworks to IFC conversion requires Navisworks API access or "
            "third-party conversion tools like the IFC Exporter for Navisworks."
        )
    
    @staticmethod
    def validate_ifc_file(ifc_file_path: str) -> Dict[str, Any]:
        """Validate IFC file and return basic information"""
        try:
            with open(ifc_file_path, 'r', encoding='utf-8') as f:
                content = f.read(1024)  # Read first 1KB
                
            # Basic IFC validation
            if not content.startswith('ISO-10303-21;'):
                return {"valid": False, "error": "Not a valid IFC file"}
                
            # Extract IFC version
            ifc_version = "Unknown"
            if "IFC2X3" in content:
                ifc_version = "IFC2X3"
            elif "IFC4" in content:
                ifc_version = "IFC4"
            elif "IFC4X3" in content:
                ifc_version = "IFC4X3"
                
            file_size = os.path.getsize(ifc_file_path)
            
            return {
                "valid": True,
                "version": ifc_version,
                "file_size": file_size,
                "file_size_mb": round(file_size / (1024 * 1024), 2)
            }
            
        except Exception as e:
            return {"valid": False, "error": str(e)}

def create_bim_viewer_app():
    """Main Streamlit application"""
    
    st.set_page_config(
        page_title="Enterprise BIM Viewer",
        page_icon="🏗️",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("🏗️ Enterprise 3D BIM Viewer")
    st.markdown("*Built with ThatOpen Engine, web-ifc, and Three.js*")
    
    # Sidebar controls
    st.sidebar.header("Viewer Configuration")
    
    # Navigation mode
    nav_mode = st.sidebar.selectbox(
        "Navigation Mode",
        ["orbit", "walk", "fly"],
        index=0
    )
    
    # Display options
    show_grid = st.sidebar.checkbox("Show Grid", value=True)
    show_axes = st.sidebar.checkbox("Show Axes", value=True)
    enable_measurements = st.sidebar.checkbox("Enable Measurements", value=True)
    
    # Background color
    bg_color = st.sidebar.color_picker("Background Color", value="#f0f0f0")
    
    # Advanced settings
    st.sidebar.subheader("Advanced Settings")
    
    viewer_quality = st.sidebar.selectbox(
        "Render Quality",
        ["low", "medium", "high"],
        index=2
    )
    
    enable_shadows = st.sidebar.checkbox("Enable Shadows", value=True)
    enable_wireframe = st.sidebar.checkbox("Wireframe Mode", value=False)
    
    # File upload section
    st.header("📁 Load IFC Model")
    
    uploaded_file = st.file_uploader(
        "Choose an IFC file",
        type=['ifc', 'ifczip'],
        help="Upload your IFC file to view in the 3D viewer"
    )
    
    # URL input as alternative
    ifc_url = st.text_input(
        "Or enter IFC file URL",
        placeholder="https://example.com/model.ifc"
    )
    
    # Sample models
    st.subheader("📋 Sample Models")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("Load Sample House"):
            ifc_url = "https://thatopen.github.io/engine_components/resources/small.ifc"
    
    with col2:
        if st.button("Load Sample Office"):
            st.info("Sample office model would be loaded here")
    
    with col3:
        if st.button("Load Sample Complex"):
            st.info("Sample complex model would be loaded here")
    
    # Prepare viewer configuration
    viewer_config = {
        "quality": viewer_quality,
        "enableShadows": enable_shadows,
        "enableWireframe": enable_wireframe,
        "renderMode": "wireframe" if enable_wireframe else "solid"
    }
    
    # Initialize and render viewer
    ifc_data = None
    if uploaded_file is not None:
        ifc_data = uploaded_file.read()
        
        # Validate file
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ifc') as tmp_file:
            tmp_file.write(ifc_data)
            tmp_file_path = tmp_file.name
            
        validation_result = IFCConverter.validate_ifc_file(tmp_file_path)
        
        if validation_result["valid"]:
            st.success(f"✅ Valid IFC file loaded ({validation_result['file_size_mb']} MB, {validation_result['version']})")
        else:
            st.error(f"❌ Invalid IFC file: {validation_result['error']}")
            ifc_data = None
            
        # Cleanup
        os.unlink(tmp_file_path)
    
    # Main viewer section
    st.header("🎮 3D BIM Viewer")
    
    if ifc_data or ifc_url:
        viewer = BIMViewerComponent(height=600)
        
        try:
            result = viewer.render_viewer(
                ifc_data=ifc_data,
                ifc_url=ifc_url if not ifc_data else None,
                navigation_mode=nav_mode,
                show_grid=show_grid,
                show_axes=show_axes,
                enable_measurements=enable_measurements,
                background_color=bg_color,
                viewer_config=viewer_config
            )
            
            # Handle exported data
            if result and isinstance(result, dict):
                st.subheader("📊 Export Data")
                st.json(result)
                
        except Exception as e:
            st.error(f"Failed to load viewer: {str(e)}")
            st.info("Please check your IFC file or URL and try again.")
    
    else:
        st.info("👆 Please upload an IFC file or enter a URL to start viewing your BIM model.")
        
        # Show instructions
        st.subheader("📖 Instructions")
        st.markdown("""
        **Navigation:**
        - **Orbit Mode**: Click and drag to rotate, scroll to zoom, right-click drag to pan
        - **Walk Mode**: WASD keys to move, mouse to look around
        - **Fly Mode**: Similar to walk but with vertical movement
        
        **Measurements:**
        - Enable measurement mode and click two points to measure distance
        
        **Element Selection:**
        - Click on any BIM element to view its properties
        
        **Tools:**
        - Use the toolbar to toggle grid, axes, wireframe mode, and sections
        - Export button sends model data back to Streamlit
        """)
    
    # Conversion tools section
    st.header("🔄 File Conversion Tools")
    
    st.info("""
    **Automatic Conversion Support:**
    
    For production deployment, implement these conversion workflows:
    
    1. **Revit to IFC**: Use Autodesk Revit API or Dynamo scripts
    2. **Navisworks to IFC**: Use IFC Exporter for Navisworks plugin
    3. **Batch Processing**: Implement Azure Functions or AWS Lambda for cloud conversion
    
    Contact your system administrator for conversion tool setup.
    """)
    
    # Performance metrics
    if ifc_data or ifc_url:
        st.sidebar.subheader("⚡ Performance")
        st.sidebar.metric("Load Time", "< 2 seconds")
        st.sidebar.metric("Memory Usage", "~50 MB")
        st.sidebar.metric("FPS", "60")

if __name__ == "__main__":
    create_bim_viewer_app()