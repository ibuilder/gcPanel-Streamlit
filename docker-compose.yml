version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gcpanel-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENABLE_MONITORING=true
      - LOG_LEVEL=INFO
    depends_on:
      - db
    networks:
      - gcpanel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/_stcore/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Database service
  db:
    image: postgres:14-alpine
    container_name: gcpanel-db
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-gcpanel}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-gcpanel}
      - POSTGRES_DB=${POSTGRES_DB:-gcpanel}
    ports:
      - "5432:5432"
    networks:
      - gcpanel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gcpanel"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginx for SSL termination and caching
  nginx:
    image: nginx:alpine
    container_name: gcpanel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/www:/var/www/html
    depends_on:
      - app
    networks:
      - gcpanel-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Backup service
  backup:
    image: postgres:14-alpine
    container_name: gcpanel-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
    environment:
      - PGUSER=${POSTGRES_USER:-gcpanel}
      - PGPASSWORD=${POSTGRES_PASSWORD:-gcpanel}
      - PGHOST=db
      - PGDATABASE=${POSTGRES_DB:-gcpanel}
    command: 
      - /bin/sh 
      - -c 
      - |
        mkdir -p /backups
        while true; do
          BACKUP_FILE="/backups/backup_$(date +%Y%m%d_%H%M%S).sql.gz"
          pg_dump | gzip > "$BACKUP_FILE"
          echo "Backup completed: $BACKUP_FILE"
          find /backups -type f -name "backup_*.sql.gz" -mtime +7 -delete
          sleep 86400
        done
    networks:
      - gcpanel-network
    depends_on:
      - db

  # Monitoring system
  prometheus:
    image: prom/prometheus:latest
    container_name: gcpanel-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - gcpanel-network

  grafana:
    image: grafana/grafana:latest
    container_name: gcpanel-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - gcpanel-network
    depends_on:
      - prometheus

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  gcpanel-network:
    driver: bridge